// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetApiAbpApiDefinitionData, GetApiAbpApiDefinitionError, GetApiAbpApiDefinitionResponse, GetApiAbpApplicationConfigurationData, GetApiAbpApplicationConfigurationError, GetApiAbpApplicationConfigurationResponse, GetApiAbpApplicationLocalizationData, GetApiAbpApplicationLocalizationError, GetApiAbpApplicationLocalizationResponse, PostApiAppAccountLoginData, PostApiAppAccountLoginError, PostApiAppAccountLoginResponse, PostAuditLogsPageData, PostAuditLogsPageError, PostAuditLogsPageResponse, PostDataDictionaryPageData, PostDataDictionaryPageError, PostDataDictionaryPageResponse, PostDataDictionaryPageDetailData, PostDataDictionaryPageDetailError, PostDataDictionaryPageDetailResponse, PostDataDictionaryCreateData, PostDataDictionaryCreateError, PostDataDictionaryCreateResponse, PostDataDictionaryCreateDetailData, PostDataDictionaryCreateDetailError, PostDataDictionaryCreateDetailResponse, PostDataDictionaryStatusData, PostDataDictionaryStatusError, PostDataDictionaryStatusResponse, PostDataDictionaryUpdateDetailData, PostDataDictionaryUpdateDetailError, PostDataDictionaryUpdateDetailResponse, PostDataDictionaryDeleteData, PostDataDictionaryDeleteError, PostDataDictionaryDeleteResponse, PostDataDictionaryDeleteDataDictionaryTypeData, PostDataDictionaryDeleteDataDictionaryTypeError, PostDataDictionaryDeleteDataDictionaryTypeResponse, PostDataDictionaryUpdateData, PostDataDictionaryUpdateError, PostDataDictionaryUpdateResponse, PostFeaturesListData, PostFeaturesListError, PostFeaturesListResponse, PostFeaturesUpdateData, PostFeaturesUpdateError, PostFeaturesUpdateResponse, PostFeaturesDeleteData, PostFeaturesDeleteError, PostFeaturesDeleteResponse, PostIdentitySecurityLogsPageData, PostIdentitySecurityLogsPageError, PostIdentitySecurityLogsPageResponse, PostLanguagesAllError, PostLanguagesAllResponse, PostLanguagesPageData, PostLanguagesPageError, PostLanguagesPageResponse, PostLanguagesCreateData, PostLanguagesCreateError, PostLanguagesCreateResponse, PostLanguagesUpdateData, PostLanguagesUpdateError, PostLanguagesUpdateResponse, PostLanguagesDeleteData, PostLanguagesDeleteError, PostLanguagesDeleteResponse, PostLanguagesSetDefaultData, PostLanguagesSetDefaultError, PostLanguagesSetDefaultResponse, PostLanguageTextsAllResourceError, PostLanguageTextsAllResourceResponse, PostLanguageTextsPageData, PostLanguageTextsPageError, PostLanguageTextsPageResponse, PostLanguageTextsCreateData, PostLanguageTextsCreateError, PostLanguageTextsCreateResponse, PostLanguageTextsUpdateData, PostLanguageTextsUpdateError, PostLanguageTextsUpdateResponse, PostNotificationNotificationPageData, PostNotificationNotificationPageError, PostNotificationNotificationPageResponse, PostNotificationNotificationSubscriptionPageData, PostNotificationNotificationSubscriptionPageError, PostNotificationNotificationSubscriptionPageResponse, PostNotificationSendCommonWarningMessageData, PostNotificationSendCommonWarningMessageError, PostNotificationSendCommonWarningMessageResponse, PostNotificationSendCommonInformationMessageData, PostNotificationSendCommonInformationMessageError, PostNotificationSendCommonInformationMessageResponse, PostNotificationSendCommonErrorMessageData, PostNotificationSendCommonErrorMessageError, PostNotificationSendCommonErrorMessageResponse, PostNotificationSendBroadCastWarningMessageData, PostNotificationSendBroadCastWarningMessageError, PostNotificationSendBroadCastWarningMessageResponse, PostNotificationSendBroadCastInformationMessageData, PostNotificationSendBroadCastInformationMessageError, PostNotificationSendBroadCastInformationMessageResponse, PostNotificationSendBroadCastErrorMessageData, PostNotificationSendBroadCastErrorMessageError, PostNotificationSendBroadCastErrorMessageResponse, PostNotificationReadData, PostNotificationReadError, PostNotificationReadResponse, PostOrganizationUnitsTreeError, PostOrganizationUnitsTreeResponse, PostOrganizationUnitsCreateData, PostOrganizationUnitsCreateError, PostOrganizationUnitsCreateResponse, PostOrganizationUnitsDeleteData, PostOrganizationUnitsDeleteError, PostOrganizationUnitsDeleteResponse, PostOrganizationUnitsUpdateData, PostOrganizationUnitsUpdateError, PostOrganizationUnitsUpdateResponse, PostOrganizationUnitsAddRoleToOrganizationUnitAsyncData, PostOrganizationUnitsAddRoleToOrganizationUnitAsyncError, PostOrganizationUnitsAddRoleToOrganizationUnitAsyncResponse, PostOrganizationUnitsRemoveRoleFromOrganizationUnitAsyncData, PostOrganizationUnitsRemoveRoleFromOrganizationUnitAsyncError, PostOrganizationUnitsRemoveRoleFromOrganizationUnitAsyncResponse, PostOrganizationUnitsAddUserToOrganizationUnitData, PostOrganizationUnitsAddUserToOrganizationUnitError, PostOrganizationUnitsAddUserToOrganizationUnitResponse, PostOrganizationUnitsRemoveUserFromOrganizationUnitData, PostOrganizationUnitsRemoveUserFromOrganizationUnitError, PostOrganizationUnitsRemoveUserFromOrganizationUnitResponse, PostOrganizationUnitsGetUsersData, PostOrganizationUnitsGetUsersError, PostOrganizationUnitsGetUsersResponse, PostOrganizationUnitsGetRolesData, PostOrganizationUnitsGetRolesError, PostOrganizationUnitsGetRolesResponse, PostOrganizationUnitsGetUnAddUsersData, PostOrganizationUnitsGetUnAddUsersError, PostOrganizationUnitsGetUnAddUsersResponse, PostOrganizationUnitsGetUnAddRolesData, PostOrganizationUnitsGetUnAddRolesError, PostOrganizationUnitsGetUnAddRolesResponse, PostPermissionsTreeData, PostPermissionsTreeError, PostPermissionsTreeResponse, PostPermissionsUpdateData, PostPermissionsUpdateError, PostPermissionsUpdateResponse, PostRolesAllError, PostRolesAllResponse, PostRolesPageData, PostRolesPageError, PostRolesPageResponse, PostRolesCreateData, PostRolesCreateError, PostRolesCreateResponse, PostRolesUpdateData, PostRolesUpdateError, PostRolesUpdateResponse, PostRolesDeleteData, PostRolesDeleteError, PostRolesDeleteResponse, PostSettingsAllError, PostSettingsAllResponse, PostSettingsUpdateData, PostSettingsUpdateError, PostSettingsUpdateResponse, PostTenantsFindData, PostTenantsFindError, PostTenantsFindResponse, PostTenantsPageData, PostTenantsPageError, PostTenantsPageResponse, PostTenantsCreateData, PostTenantsCreateError, PostTenantsCreateResponse, PostTenantsUpdateData, PostTenantsUpdateError, PostTenantsUpdateResponse, PostTenantsDeleteData, PostTenantsDeleteError, PostTenantsDeleteResponse, PostTenantsPageConnectionStringData, PostTenantsPageConnectionStringError, PostTenantsPageConnectionStringResponse, PostTenantsAddOrUpdateConnectionStringData, PostTenantsAddOrUpdateConnectionStringError, PostTenantsAddOrUpdateConnectionStringResponse, PostTenantsDeleteConnectionStringData, PostTenantsDeleteConnectionStringError, PostTenantsDeleteConnectionStringResponse, PostUsersPageData, PostUsersPageError, PostUsersPageResponse, PostUsersListData, PostUsersListError, PostUsersListResponse, PostUsersExportData, PostUsersExportError, PostUsersExportResponse, PostUsersCreateData, PostUsersCreateError, PostUsersCreateResponse, PostUsersUpdateData, PostUsersUpdateError, PostUsersUpdateResponse, PostUsersDeleteData, PostUsersDeleteError, PostUsersDeleteResponse, PostUsersRoleData, PostUsersRoleError, PostUsersRoleResponse, PostUsersChangePasswordData, PostUsersChangePasswordError, PostUsersChangePasswordResponse, PostUsersLockData, PostUsersLockError, PostUsersLockResponse } from './types.gen';

export const client = createClient(createConfig());

export const getApiAbpApiDefinition = <ThrowOnError extends boolean = false>(options?: Options<GetApiAbpApiDefinitionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAbpApiDefinitionResponse, GetApiAbpApiDefinitionError, ThrowOnError>({
        ...options,
        url: '/api/abp/api-definition'
    });
};

export const getApiAbpApplicationConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetApiAbpApplicationConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAbpApplicationConfigurationResponse, GetApiAbpApplicationConfigurationError, ThrowOnError>({
        ...options,
        url: '/api/abp/application-configuration'
    });
};

export const getApiAbpApplicationLocalization = <ThrowOnError extends boolean = false>(options: Options<GetApiAbpApplicationLocalizationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAbpApplicationLocalizationResponse, GetApiAbpApplicationLocalizationError, ThrowOnError>({
        ...options,
        url: '/api/abp/application-localization'
    });
};

/**
 * 登录
 */
export const postApiAppAccountLogin = <ThrowOnError extends boolean = false>(options?: Options<PostApiAppAccountLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAppAccountLoginResponse, PostApiAppAccountLoginError, ThrowOnError>({
        ...options,
        url: '/api/app/account/login'
    });
};

/**
 * 分页获取审计日志信息
 */
export const postAuditLogsPage = <ThrowOnError extends boolean = false>(options?: Options<PostAuditLogsPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuditLogsPageResponse, PostAuditLogsPageError, ThrowOnError>({
        ...options,
        url: '/AuditLogs/page'
    });
};

/**
 * 分页字典类型
 */
export const postDataDictionaryPage = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryPageResponse, PostDataDictionaryPageError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/page'
    });
};

/**
 * 分页字典明细
 */
export const postDataDictionaryPageDetail = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryPageDetailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryPageDetailResponse, PostDataDictionaryPageDetailError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/pageDetail'
    });
};

/**
 * 创建字典类型
 */
export const postDataDictionaryCreate = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryCreateResponse, PostDataDictionaryCreateError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/create'
    });
};

/**
 * 创建字典明细
 */
export const postDataDictionaryCreateDetail = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryCreateDetailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryCreateDetailResponse, PostDataDictionaryCreateDetailError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/createDetail'
    });
};

/**
 * 设置字典明细状态
 */
export const postDataDictionaryStatus = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryStatusData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryStatusResponse, PostDataDictionaryStatusError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/status'
    });
};

/**
 * 更新字典明细
 */
export const postDataDictionaryUpdateDetail = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryUpdateDetailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryUpdateDetailResponse, PostDataDictionaryUpdateDetailError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/updateDetail'
    });
};

/**
 * 删除字典明细
 */
export const postDataDictionaryDelete = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryDeleteResponse, PostDataDictionaryDeleteError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/delete'
    });
};

/**
 * 删除字典类型
 */
export const postDataDictionaryDeleteDataDictionaryType = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryDeleteDataDictionaryTypeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryDeleteDataDictionaryTypeResponse, PostDataDictionaryDeleteDataDictionaryTypeError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/deleteDataDictionaryType'
    });
};

/**
 * 修改字典类型
 */
export const postDataDictionaryUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostDataDictionaryUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDataDictionaryUpdateResponse, PostDataDictionaryUpdateError, ThrowOnError>({
        ...options,
        url: '/DataDictionary/update'
    });
};

/**
 * 获取Features
 */
export const postFeaturesList = <ThrowOnError extends boolean = false>(options?: Options<PostFeaturesListData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFeaturesListResponse, PostFeaturesListError, ThrowOnError>({
        ...options,
        url: '/Features/list'
    });
};

/**
 * 更新Features
 */
export const postFeaturesUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostFeaturesUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFeaturesUpdateResponse, PostFeaturesUpdateError, ThrowOnError>({
        ...options,
        url: '/Features/update'
    });
};

/**
 * 删除Features
 */
export const postFeaturesDelete = <ThrowOnError extends boolean = false>(options?: Options<PostFeaturesDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFeaturesDeleteResponse, PostFeaturesDeleteError, ThrowOnError>({
        ...options,
        url: '/Features/delete'
    });
};

/**
 * 分页获取登录日志信息
 */
export const postIdentitySecurityLogsPage = <ThrowOnError extends boolean = false>(options?: Options<PostIdentitySecurityLogsPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIdentitySecurityLogsPageResponse, PostIdentitySecurityLogsPageError, ThrowOnError>({
        ...options,
        url: '/IdentitySecurityLogs/page'
    });
};

/**
 * 获取所有语言
 */
export const postLanguagesAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguagesAllResponse, PostLanguagesAllError, ThrowOnError>({
        ...options,
        url: '/Languages/All'
    });
};

/**
 * 分页查询语言
 */
export const postLanguagesPage = <ThrowOnError extends boolean = false>(options?: Options<PostLanguagesPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguagesPageResponse, PostLanguagesPageError, ThrowOnError>({
        ...options,
        url: '/Languages/Page'
    });
};

/**
 * 创建语言
 */
export const postLanguagesCreate = <ThrowOnError extends boolean = false>(options?: Options<PostLanguagesCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguagesCreateResponse, PostLanguagesCreateError, ThrowOnError>({
        ...options,
        url: '/Languages/Create'
    });
};

/**
 * 编辑语言
 */
export const postLanguagesUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostLanguagesUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguagesUpdateResponse, PostLanguagesUpdateError, ThrowOnError>({
        ...options,
        url: '/Languages/Update'
    });
};

/**
 * 删除语言
 */
export const postLanguagesDelete = <ThrowOnError extends boolean = false>(options?: Options<PostLanguagesDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguagesDeleteResponse, PostLanguagesDeleteError, ThrowOnError>({
        ...options,
        url: '/Languages/Delete'
    });
};

/**
 * 设置默认语言
 */
export const postLanguagesSetDefault = <ThrowOnError extends boolean = false>(options?: Options<PostLanguagesSetDefaultData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguagesSetDefaultResponse, PostLanguagesSetDefaultError, ThrowOnError>({
        ...options,
        url: '/Languages/SetDefault'
    });
};

/**
 * 获取所有资源
 */
export const postLanguageTextsAllResource = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguageTextsAllResourceResponse, PostLanguageTextsAllResourceError, ThrowOnError>({
        ...options,
        url: '/LanguageTexts/AllResource'
    });
};

/**
 * 分页查询语言文本
 */
export const postLanguageTextsPage = <ThrowOnError extends boolean = false>(options?: Options<PostLanguageTextsPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguageTextsPageResponse, PostLanguageTextsPageError, ThrowOnError>({
        ...options,
        url: '/LanguageTexts/Page'
    });
};

/**
 * 创建语言文本
 */
export const postLanguageTextsCreate = <ThrowOnError extends boolean = false>(options?: Options<PostLanguageTextsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguageTextsCreateResponse, PostLanguageTextsCreateError, ThrowOnError>({
        ...options,
        url: '/LanguageTexts/Create'
    });
};

/**
 * 编辑语言文本
 */
export const postLanguageTextsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostLanguageTextsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLanguageTextsUpdateResponse, PostLanguageTextsUpdateError, ThrowOnError>({
        ...options,
        url: '/LanguageTexts/Update'
    });
};

/**
 * 分页获取文本消息
 */
export const postNotificationNotificationPage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationNotificationPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationNotificationPageResponse, PostNotificationNotificationPageError, ThrowOnError>({
        ...options,
        url: '/Notification/NotificationPage'
    });
};

/**
 * 分页获取广播消息已读人数
 */
export const postNotificationNotificationSubscriptionPage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationNotificationSubscriptionPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationNotificationSubscriptionPageResponse, PostNotificationNotificationSubscriptionPageError, ThrowOnError>({
        ...options,
        url: '/Notification/NotificationSubscriptionPage'
    });
};

/**
 * 发送警告文本消息
 */
export const postNotificationSendCommonWarningMessage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendCommonWarningMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationSendCommonWarningMessageResponse, PostNotificationSendCommonWarningMessageError, ThrowOnError>({
        ...options,
        url: '/Notification/SendCommonWarningMessage'
    });
};

/**
 * 发送普通文本消息
 */
export const postNotificationSendCommonInformationMessage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendCommonInformationMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationSendCommonInformationMessageResponse, PostNotificationSendCommonInformationMessageError, ThrowOnError>({
        ...options,
        url: '/Notification/SendCommonInformationMessage'
    });
};

/**
 * 发送错误文本消息
 */
export const postNotificationSendCommonErrorMessage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendCommonErrorMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationSendCommonErrorMessageResponse, PostNotificationSendCommonErrorMessageError, ThrowOnError>({
        ...options,
        url: '/Notification/SendCommonErrorMessage'
    });
};

/**
 * 发送警告广播消息
 */
export const postNotificationSendBroadCastWarningMessage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendBroadCastWarningMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationSendBroadCastWarningMessageResponse, PostNotificationSendBroadCastWarningMessageError, ThrowOnError>({
        ...options,
        url: '/Notification/SendBroadCastWarningMessage'
    });
};

/**
 * 发送正常广播消息
 */
export const postNotificationSendBroadCastInformationMessage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendBroadCastInformationMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationSendBroadCastInformationMessageResponse, PostNotificationSendBroadCastInformationMessageError, ThrowOnError>({
        ...options,
        url: '/Notification/SendBroadCastInformationMessage'
    });
};

/**
 * 发送错误广播消息
 */
export const postNotificationSendBroadCastErrorMessage = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendBroadCastErrorMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationSendBroadCastErrorMessageResponse, PostNotificationSendBroadCastErrorMessageError, ThrowOnError>({
        ...options,
        url: '/Notification/SendBroadCastErrorMessage'
    });
};

/**
 * 消息设置为已读
 */
export const postNotificationRead = <ThrowOnError extends boolean = false>(options?: Options<PostNotificationReadData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationReadResponse, PostNotificationReadError, ThrowOnError>({
        ...options,
        url: '/Notification/Read'
    });
};

/**
 * 获取组织机构树
 */
export const postOrganizationUnitsTree = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsTreeResponse, PostOrganizationUnitsTreeError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/tree'
    });
};

/**
 * 创建组织机构
 */
export const postOrganizationUnitsCreate = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsCreateResponse, PostOrganizationUnitsCreateError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/create'
    });
};

/**
 * 删除组织机构
 */
export const postOrganizationUnitsDelete = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsDeleteResponse, PostOrganizationUnitsDeleteError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/delete'
    });
};

/**
 * 编辑组织机构
 */
export const postOrganizationUnitsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsUpdateResponse, PostOrganizationUnitsUpdateError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/update'
    });
};

/**
 * 向组织机构添加角色
 */
export const postOrganizationUnitsAddRoleToOrganizationUnitAsync = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsAddRoleToOrganizationUnitAsyncData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsAddRoleToOrganizationUnitAsyncResponse, PostOrganizationUnitsAddRoleToOrganizationUnitAsyncError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/addRoleToOrganizationUnitAsync'
    });
};

/**
 * 向组织机构删除角色
 */
export const postOrganizationUnitsRemoveRoleFromOrganizationUnitAsync = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsRemoveRoleFromOrganizationUnitAsyncData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsRemoveRoleFromOrganizationUnitAsyncResponse, PostOrganizationUnitsRemoveRoleFromOrganizationUnitAsyncError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/removeRoleFromOrganizationUnitAsync'
    });
};

/**
 * 向组织机构添加用户
 */
export const postOrganizationUnitsAddUserToOrganizationUnit = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsAddUserToOrganizationUnitData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsAddUserToOrganizationUnitResponse, PostOrganizationUnitsAddUserToOrganizationUnitError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/addUserToOrganizationUnit'
    });
};

/**
 * 向组织机构删除用户
 */
export const postOrganizationUnitsRemoveUserFromOrganizationUnit = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsRemoveUserFromOrganizationUnitData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsRemoveUserFromOrganizationUnitResponse, PostOrganizationUnitsRemoveUserFromOrganizationUnitError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/removeUserFromOrganizationUnit'
    });
};

/**
 * 分页获取组织机构下用户
 */
export const postOrganizationUnitsGetUsers = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsGetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsGetUsersResponse, PostOrganizationUnitsGetUsersError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/getUsers'
    });
};

/**
 * 分页获取组织机构下角色
 */
export const postOrganizationUnitsGetRoles = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsGetRolesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsGetRolesResponse, PostOrganizationUnitsGetRolesError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/getRoles'
    });
};

/**
 * 获取不在组织机构的用户
 */
export const postOrganizationUnitsGetUnAddUsers = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsGetUnAddUsersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsGetUnAddUsersResponse, PostOrganizationUnitsGetUnAddUsersError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/getUnAddUsers'
    });
};

/**
 * 获取不在组织机构的角色
 */
export const postOrganizationUnitsGetUnAddRoles = <ThrowOnError extends boolean = false>(options?: Options<PostOrganizationUnitsGetUnAddRolesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationUnitsGetUnAddRolesResponse, PostOrganizationUnitsGetUnAddRolesError, ThrowOnError>({
        ...options,
        url: '/OrganizationUnits/getUnAddRoles'
    });
};

/**
 * 获取角色权限
 */
export const postPermissionsTree = <ThrowOnError extends boolean = false>(options?: Options<PostPermissionsTreeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPermissionsTreeResponse, PostPermissionsTreeError, ThrowOnError>({
        ...options,
        url: '/Permissions/tree'
    });
};

/**
 * 更新角色
 */
export const postPermissionsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostPermissionsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPermissionsUpdateResponse, PostPermissionsUpdateError, ThrowOnError>({
        ...options,
        url: '/Permissions/update'
    });
};

/**
 * 获取所有角色
 */
export const postRolesAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRolesAllResponse, PostRolesAllError, ThrowOnError>({
        ...options,
        url: '/Roles/all'
    });
};

/**
 * 分页获取角色
 */
export const postRolesPage = <ThrowOnError extends boolean = false>(options?: Options<PostRolesPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRolesPageResponse, PostRolesPageError, ThrowOnError>({
        ...options,
        url: '/Roles/page'
    });
};

/**
 * 创建角色
 */
export const postRolesCreate = <ThrowOnError extends boolean = false>(options?: Options<PostRolesCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRolesCreateResponse, PostRolesCreateError, ThrowOnError>({
        ...options,
        url: '/Roles/create'
    });
};

/**
 * 更新角色
 */
export const postRolesUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostRolesUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRolesUpdateResponse, PostRolesUpdateError, ThrowOnError>({
        ...options,
        url: '/Roles/update'
    });
};

/**
 * 删除角色
 */
export const postRolesDelete = <ThrowOnError extends boolean = false>(options?: Options<PostRolesDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRolesDeleteResponse, PostRolesDeleteError, ThrowOnError>({
        ...options,
        url: '/Roles/delete'
    });
};

/**
 * 获取所有Setting
 */
export const postSettingsAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSettingsAllResponse, PostSettingsAllError, ThrowOnError>({
        ...options,
        url: '/Settings/all'
    });
};

/**
 * 更新Setting
 */
export const postSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSettingsUpdateResponse, PostSettingsUpdateError, ThrowOnError>({
        ...options,
        url: '/Settings/update'
    });
};

/**
 * 通过名称获取租户信息
 */
export const postTenantsFind = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsFindData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsFindResponse, PostTenantsFindError, ThrowOnError>({
        ...options,
        url: '/Tenants/find'
    });
};

/**
 * 分页获取租户信息
 */
export const postTenantsPage = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsPageResponse, PostTenantsPageError, ThrowOnError>({
        ...options,
        url: '/Tenants/page'
    });
};

/**
 * 创建租户
 */
export const postTenantsCreate = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsCreateResponse, PostTenantsCreateError, ThrowOnError>({
        ...options,
        url: '/Tenants/create'
    });
};

/**
 * 更新租户
 */
export const postTenantsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsUpdateResponse, PostTenantsUpdateError, ThrowOnError>({
        ...options,
        url: '/Tenants/update'
    });
};

/**
 * 删除租户
 */
export const postTenantsDelete = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsDeleteResponse, PostTenantsDeleteError, ThrowOnError>({
        ...options,
        url: '/Tenants/delete'
    });
};

/**
 * 分页租户连接字符串
 */
export const postTenantsPageConnectionString = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsPageConnectionStringData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsPageConnectionStringResponse, PostTenantsPageConnectionStringError, ThrowOnError>({
        ...options,
        url: '/Tenants/pageConnectionString'
    });
};

/**
 * 新增或者更新租户所有连接字符串
 */
export const postTenantsAddOrUpdateConnectionString = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsAddOrUpdateConnectionStringData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsAddOrUpdateConnectionStringResponse, PostTenantsAddOrUpdateConnectionStringError, ThrowOnError>({
        ...options,
        url: '/Tenants/addOrUpdateConnectionString'
    });
};

/**
 * 删除租户连接字符串
 */
export const postTenantsDeleteConnectionString = <ThrowOnError extends boolean = false>(options?: Options<PostTenantsDeleteConnectionStringData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTenantsDeleteConnectionStringResponse, PostTenantsDeleteConnectionStringError, ThrowOnError>({
        ...options,
        url: '/Tenants/deleteConnectionString'
    });
};

/**
 * 分页获取用户信息
 */
export const postUsersPage = <ThrowOnError extends boolean = false>(options?: Options<PostUsersPageData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersPageResponse, PostUsersPageError, ThrowOnError>({
        ...options,
        url: '/Users/page'
    });
};

/**
 * 分页获取用户信息
 */
export const postUsersList = <ThrowOnError extends boolean = false>(options?: Options<PostUsersListData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersListResponse, PostUsersListError, ThrowOnError>({
        ...options,
        url: '/Users/list'
    });
};

/**
 * 导出用户列表
 */
export const postUsersExport = <ThrowOnError extends boolean = false>(options?: Options<PostUsersExportData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersExportResponse, PostUsersExportError, ThrowOnError>({
        ...options,
        url: '/Users/export'
    });
};

/**
 * 创建用户
 */
export const postUsersCreate = <ThrowOnError extends boolean = false>(options?: Options<PostUsersCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersCreateResponse, PostUsersCreateError, ThrowOnError>({
        ...options,
        url: '/Users/create'
    });
};

/**
 * 编辑用户
 */
export const postUsersUpdate = <ThrowOnError extends boolean = false>(options?: Options<PostUsersUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersUpdateResponse, PostUsersUpdateError, ThrowOnError>({
        ...options,
        url: '/Users/update'
    });
};

/**
 * 删除用户
 */
export const postUsersDelete = <ThrowOnError extends boolean = false>(options?: Options<PostUsersDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersDeleteResponse, PostUsersDeleteError, ThrowOnError>({
        ...options,
        url: '/Users/delete'
    });
};

/**
 * 获取用户角色信息
 */
export const postUsersRole = <ThrowOnError extends boolean = false>(options?: Options<PostUsersRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersRoleResponse, PostUsersRoleError, ThrowOnError>({
        ...options,
        url: '/Users/role'
    });
};

/**
 * 修改当前用户密码
 */
export const postUsersChangePassword = <ThrowOnError extends boolean = false>(options?: Options<PostUsersChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersChangePasswordResponse, PostUsersChangePasswordError, ThrowOnError>({
        ...options,
        url: '/Users/changePassword'
    });
};

/**
 * 锁定用户
 */
export const postUsersLock = <ThrowOnError extends boolean = false>(options?: Options<PostUsersLockData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersLockResponse, PostUsersLockError, ThrowOnError>({
        ...options,
        url: '/Users/lock'
    });
};